["Calculation Views Vertiefung Hierarchien ","Hierarchien Überblick • Was sind Hierarchien? • Modellierung von (externen) Hierarchien im Semantikknoten • SQL-Zugriff im STAR JOIN • Arbeiten mit Hierarchien in Calculation Views • Generierung von Hierarchien • Navigation in Hierarchien Hierarchien ","Beispiele für Hierarchien - Länderhierarchie Hierarchien Region Land Stadt DACH Deutschland Bremen DACH Deutschland Hamburg EMEA Irland Dublin Parent Child DACH Deutschland Deutschland Bremen Deutschland Hamburg EMEA Irland Irland Dublin Level-Hierarchie Parent-Child-Hierarchie Hierarchie: - Geordnete, mehrstufige Anordnung von Merkmalen - Tiefere Ebene (Level) entspricht höherem Detailgrad ","Zeithierarchien - Levelhierarchie Hierarchien Jahr Quartal Monat Datum 2020 04 12 31.12.2020 2020 04 12 30.12.2020 … 2020 03 09 30.09.2020 Fiskaljahr Fiskalperiode Datum 2020 12 31.12.2020 2020 11 30.11.2020 … Gregorianischer Kalender Fiskalischer Kalender ","Org-Hierarchie – Parent-/Child Hierarchien ORG_ID PARENT_ID Title 1 NULL CEO 2 1 EA 3 1 COO 7 3 SVP SALES 10 7 US Sales 11 7 EMEA 12 7 APJ Sales ","Modellierung von externen Hierarchien in Calc Views Hierarchien • Definition im Semantikknoten • Art wählen: Level- oder Parent/Child-Hierarchie • Spalten festlegen (aus View) • Zeitabhängigkeit (nur Parent/Child) • Erben aus anderen Views • Definition in einem Dimension View (bsp. Zeitdimension) • Einbinden des Dimension View in Cube View • Extract Semantics -> Hierarchies • Star JOIN -> Shared Hierarchies • SQL-Zugriff auf Hierarchien möglich ","Einsatz von externe Hierarchien im Calculation View Bereich Beschreibung Reporting Ergebnis nach Hierarchie-Leveln gliedern Aggregation auf Hierarchie-Knoten Filtervariable Wertehilfe in hierarchischer Darstellung Analytische Privilegien Berechtigung auf Knoten einer Hierarchie SQL-Script SQL-Zugriff auf Hierarchien in STAR JOINs Hierarchien ","Beispiele (externe Hierarchie) Hierarchien • Definition einer Zeithierarchie in einem Dimension View • Einbindung in Star Join Cube und Darstellung in Datenvorschau • SQL-Zugriff auf Hierarchie ","Vorbereitung: Zeit-Dimensions-Tabellen Hierarchien Tabelle M_TIME_DIMENSION • Enthält kalendarische Merkmale zu Datum: • YEAR, MONTH, QUARTER etc. • Kann manuell angelegt werden oder via .hdbtable • Befüllen der Tabelle: • Ordner db -> Rechtsklick: Modeling -> Maintain Time Tables • Granularität, Zeitbereich eintragen ","Übung – Dimension View für Zeit mit Level- Hierarchie erstellen Schritt 1:Dimension View anlegen - Anlage Dimension View: - Type: TIME - Granularity: Date - Table: M_TIME_DIMENSION Schritt 2: Hierarchie modellieren - Semantics: - Reiter Hierarchies -> Add - Level Hierarchy - Name: LEVEL_1 - Node Style: Name Path - Vier Level: - YEAR - CALQUARTER - CALMONTH - DATE_SQL Hierarchien ","Übung – Dimension View für Zeit mit Level- Hierarchie erstellen (Forts.) Schritt 3:STAR JOIN erweitern - Öffne CV_CUBE_STAR_JOIN - Füge Dimension View CV_DIM_TIME als Dimension ein - Join-Bedingung: DUE_DATE = DATE_SQL - Aktiviere Enable Hierarchies for SQL access - Im Semantikknoten Hierarchien Zeitmerkmale sind sichtbar: Hierarchie ist sichtbar: ","Übung – Dimension View für Zeit mit Level- Hierarchie erstellen (Forts.) Hierarchien Datenvorschau des Star Join Cube: SQL-Zugriff: Generierte Spalte LEVEL_TIME_HIERARCHYnode ","Interne Verwendung von Hierarchien in Calc Views Hierarchien • Bisher: Hierarchie bei Ausführung konsumiert, keine Logik auf Basis der Hierarchie • Jetzt: Hierarchien innerhalb Calculation View generieren und verwenden • Use Case: • Filtere Daten mit Hierarchien: Selektiere alle Unterknoten eines Knotens • Aggregiere Kennzahlen von unteren Knoten auf Hierarchieknoten ","Interne Verwendung von Hierarchien in Calc Views Hierarchien • Knotentyp Hierarchy Function • Zwei Funktionsweisen: • Generation: Erstelle Hierarchie aus Datenquelle • Input: flache Tabelle mit Parent-/Child-Relation oder Level-Darstellung • Navigation: Navigiere in Hierarchie • Input: Generierte Hierarchie + Datenquelle zur Filterung • Wird verwendet um Knoten aus einer Hierarchie auszuwählen: • Vorgänger-/Nachfolger oder auf gleicher Ebene ","Hierarchie-Knoten – Modus Generation – Parent/Child Hierarchien • Knotentyp Hierarchy Function – Modus Generation • Erzeugt eine Parent-/Child-Hierarchie • Eine Datenquelle (Data source oder Vorgängerknoten) • Enthält flache Definition von Parent-/Childrelation • Wähle Spalten für Parent- und Childknoten aus • Ausgabe des Knotens • Hierarchiestruktur: • NODE_ID, PARENT_NODE_ID, LEVEL • + weitere Metadaten • Knoten kann als Input für weitere Hierarchie-Funktion verwendet werden! ","Hierarchie-Knoten - Ausgabe bei Modus Generation Hierarchien • Spalten in der Ausgabe des Hierarchieknoten: • PARENT_ID: Elternkoten • NODE_ID: Kindeknoten • HIERARCHY_RANK: Nummer des Knotens im Baum • Eindeutige Kennung des Knotens. Wird in Navigationsfunktion zur Filterung verwendet • HIERARCHY_TREE_SIZE: Größe des Baums unterhalb des Knotens • HIERARCHY_PARENT_RANK: Nummer des Elternknotens • HIERARCHY_LEVEL: Ebene des Knotens in der Hierarchie • Diese Information werden für die Hierarchie-Navigation verwendet ","Hierarchie-Knoten – Generierung - Beispiel im System • Quelltabelle: ORG_STRUCTURE • (Ordner ch_hierarchy) • Generiere Hierarchie • Knoten: ORG_ID • Parent: PARENT_ID • Modus: Parent/Child-Hierarchie • Beispiel-View: CV_C_HIER_ORG_STRUCTURE_01_SOL Hierarchien ","Hierarchy-Knoten - Modus Leveled Function - Generation Hierarchien • Knotentyp Hierarchy Function – Modus Leveled Function Generation • Erzeugt eine Level-Hierarchie • Eine Datenquelle (Data source oder Vorgängerknoten) • Enthält Level in einzelnen Spalten • Wähle Spalten für Level aus • Ausgabe des Knotens • Hierarchiestruktur: • NODE_ID, PARENT_NODE_ID, LEVEL • + weitere Metadaten • Ausgabe hat gleiche Struktur wie bei Modus Hierarchy Function – Generation! ","Hierarchy-Knoten - Modus Navigation Hierarchien • Input: Zwei Datenquelle • Input 1: Hierarchie-Struktur (= Ausgabe von Hierarchieknoten im Modus Generation) • Input 2: (Gefilterte) Liste von Knoten • Muss Spalte HIERARCHY_RANK enthalten • Bsp.: Projektionsknoten mit festem Filter • Auch ohne Filterung verwendbar • Modus: • Descendants: Unterknoten (direkt und indirekte) • Ancestors: Vorgängerknoten • Sibling: Knoten auf gleichem Level ","Hierarchy-Knoten - Modus Navigation – Beispiel für Nachfolgeknoten Hierarchien • Distance From, Distance To: Ab welcher Ebene sollen Nachfolgeknoten gewählt werden? • Distance From = 1 => Direkte Unterknoten • Distance To = 3 => Alle Unterknoten bis 3 Level unterhalb • Start Rank: Startknoten für die Ermittlung der Nachfolgeknoten (= Herkunft aus zweitem Input- Knoten) ","Hierarchie-Knoten – Navigation - Beispiel im System • Quelltabelle für Hierarchie-Generierung: Tabelle ORG_STRUCTURE • (Ordner ch_hierarchy) • Projektionsknoten: 1:1-Weiterleitung + Filterung (optional) • Zweiter Hierarchie-Knoten: Navigation • Ermittle alle Unterknoten (direkt/indirekte) • Aggregations-Knoten: Zähler für NODE_ID => Unterknoten können flexibel nach Aufriss gezählt werden • Beispiel: CV_C_HIER_ORG_STRUCTURE_02_SOL Hierarchien ","Hierarchie-Knoten – Navigation - Beispiel im System (II) • Modifiziere Filter im Projektionsknoten für folgende Szenarien: • Alle Unterknoten zu Knoten = CMO • Alle Unterknoten zu Knoten auf Level 2 • Alle Unterknoten zu (direkten) Kindknoten von Knoten SVP Sales • Modifiziere Navigations-Knoten: • Zeige Unterknoten bis Distanz 2 Hierarchien ","Graph-Daten • Graph basiert auf gewöhnlichen HANA-Tabellen oder Views • Tabelle für Knoten (Vertex) • Tabelle für Kanten (Edges) • Definition des Graphs durch Graph workspace • Datei: Hdbgraphworkspace • Kanten (Verbindungen): edge table • source column: Spalte mit Startknoten der Verbindung • target column: Spalte mit Endknoten der Verbindung • Knoten: vertex table • Spalte für eindeutigen Schlüssel des Knotens Geodaten, Graphen, Zeitreihen ","Graph-Daten – Calculation Views • Knoten Graph • Ein Knoten pro Calculation View • Graph-Knoten muss der unterste im Calculation View sein • Datenquelle: Graph workspace • Zugriff auf Graph-Funktionen: • Shortest Path, Neighborhood • Pattern Matching Geodaten, Graphen, Zeitreihen ","Geodaten • Werden in normalen HANA-Tabellen verwaltet • Kodieren räumliche Informationen in zwei oder drei • Dimensionen • Eigener Spaltentyp: ST_GEOMETRY • Positionen (Punkte), • Formen (Kreise, Polygone), • Linien in zwei oder drei Dimensionen Geodaten, Graphen, Zeitreihen ","Geodaten – Calculation Views • In berechneten Spalten: • Geofunktionen (Spatial functions) • Prädikate: Spatial predicates • JOIN zwischen Geodaten: Spatial Join Predicate • Beispiel: • Tabelle AIRPORT => Koordinaten von Flughäfen (JSON-Format) • Dimension View: Berechnet aus JSON-Format die Geoinformationen vom Typ ST_GEOMETRY, Längen- und Breitenangaben • Cube View: Distanzberechnung von Referenzpunkt und Sortierung nach Entfernung zu Flughafen Geodaten, Graphen, Zeitreihen ","Fragen? Hierarchien "]